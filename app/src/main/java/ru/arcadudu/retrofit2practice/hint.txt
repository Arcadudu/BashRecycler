1. для начала подрубаем зависимости в грэйдл на уровне модуля
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
2. создаем интерфейс, который содержит описания и аннотации необходимых методов получения и обработки входящих данных
    (UmoriliApi).
    Aннотация @Query("name") String resourceName показывает Retrofit'у, что в качестве параметра
    запроса нужно поставить пару name=<Значение строки resourceName>
3. Перед отправкой запроса и получение результата нужно произвести инициализацию Retrofit и объекта интерфейса.
    чтобы для каждого отдельного запроса не плодить новые объекты, выполняющие одни и те функции,
    произведем инициализацию в классе, отнаследованном от Application
    (App.class)
    В данном классе следует также переопределить метод onCreate(), в котором помимо создания объектов ретрофита
     (также понадобится включить зависимость implementation 'com.squareup.retrofit2:converter-gson:2.3.0') и интерфейса
    также определим публичный статический метод getApi,  возвращающий объект интерфейса.
4. ?????????????????????????????????????????????????????????????????????????????????????????????????
    Какие-то мутные манипуляции с http://www.jsonschema2pojo.org/
    в результате получили класс поста, содержащий основные поля и гетеросетеры к ним.

5. После этого лепим адаптер для обработки отдельных постов в ресайклере.
    Внутри ресайклера создаем кастомный вьюхолдер со всем необходимым для отображения поста.